{"version":3,"sources":["App.js","reportWebVitals.js","index.js","component/Generator.js"],"names":["App","className","Generator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Templates","handleNameChange","e","setState","name","target","value","nameCaps","toUpperCase","changeCopypasta","state","rawCopypasta","currentTemplate","copypasta","this","forceUpdate","copypastaContent","eval","type","onChange","templateData","map","templates","templateName","onClick","changeCurrentTemplate","Component"],"mappings":"oOAYeA,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,kDACA,cAACC,EAAA,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,k7CCbqBc,U,obACjB,qBAAe,IAAD,wNACV,qBAUJC,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CACVC,KAAMF,EAAEG,OAAOC,MACfC,SAAUL,EAAEG,OAAOC,MAAME,gBAC1B,WACC,EAAKC,gBAAgB,EAAKC,MAAMC,kBAbpC,EAAKD,MAAQ,CACTN,KAAM,SACNG,SAAU,SACVI,aAAc,GACdC,gBAAiB,GACjBC,UAAU,sCARJ,E,wPAoBVC,KAAKC,gB,sDAGOC,kBACZF,KAAKX,SAAS,CACVQ,aAAcK,iBACdH,UAAWI,KAAK,IAAMD,iBAAmB,S,4CAI3BZ,GAClBU,KAAKX,SAAS,CACVS,gBAAiBR,M,+BAIf,IAAD,OACL,OACI,mEAAKpB,UAAU,iBAAf,UACI,mEAAKA,UAAU,YAAf,UACI,mEAAMA,UAAU,QAAhB,kBACA,oEAAOkC,KAAK,OAAOZ,MAAOQ,KAAKJ,MAAMN,KAAMe,SAAUL,KAAKb,sBAE9D,mEAAKjB,UAAU,YAAf,UACI,mEAAMA,UAAU,QAAhB,sBACA,kEAAKA,UAAU,mBAAf,SACKoC,6CAAaC,KAAI,SAACC,GACf,OAAO,qEAAQtC,UAAW,EAAK0B,MAAME,kBAAoBU,EAAUC,aAAe,iBAAmB,GAAIC,QAAS,WAAO,EAAKf,gBAAgBa,EAAUT,WAAY,EAAKY,sBAAsBH,EAAUC,eAAlM,SAAmND,EAAUC,uBAIhP,gEAAGvC,UAAU,SAAb,SAA2C,KAApB8B,KAAKJ,MAAMN,KAAc,aAAeU,KAAKJ,MAAMG,mB,WApDnDa,+C","file":"static/js/main.299304f0.chunk.js","sourcesContent":["import './App.css';\nimport Generator from './component/Generator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Stress generator</h1>\n      <Generator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { Component } from 'react';\r\nimport templateData from '../Templates.json';\r\n\r\nexport default class Templates extends Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            name: \"keqing\",\r\n            nameCaps: \"KEQING\",\r\n            rawCopypasta: '',\r\n            currentTemplate: '',\r\n            copypasta: `Pilih template [Choose a template]`\r\n        }\r\n    }\r\n    handleNameChange = (e) => {\r\n        this.setState({\r\n            name: e.target.value,\r\n            nameCaps: e.target.value.toUpperCase()\r\n        }, () => {\r\n            this.changeCopypasta(this.state.rawCopypasta);})\r\n    }\r\n\r\n    forceUpdateHandler() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    changeCopypasta(copypastaContent) {\r\n        this.setState({\r\n            rawCopypasta: copypastaContent,\r\n            copypasta: eval('`' + copypastaContent + '`')\r\n        })\r\n    }\r\n\r\n    changeCurrentTemplate(name) {\r\n        this.setState({\r\n            currentTemplate: name\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-container\">\r\n                <div className=\"container\">\r\n                    <span className=\"title\">Name</span>\r\n                    <input type=\"text\" value={this.state.name} onChange={this.handleNameChange}></input>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <span className=\"title\">Template</span>\r\n                    <div className=\"button-container\">\r\n                        {templateData.map((templates) => {\r\n                            return <button className={this.state.currentTemplate === templates.templateName ? \"current-active\" : ''} onClick={() => {this.changeCopypasta(templates.copypasta); this.changeCurrentTemplate(templates.templateName)}}>{templates.templateName}</button>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <p className=\"output\">{this.state.name === '' ? \"input name\" : this.state.copypasta}</p>\r\n            </div>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}